# DO NOT EDIT THIS FILE!
#
# This code is generated off of PyCDP modules. If you need to make
# changes, edit the generator and regenerate all of the modules.

from __future__ import annotations
import typing

from ..context import get_connection_context, get_session_context

import cdp.autofill
from cdp.autofill import (
    Address,
    AddressField,
    AddressFields,
    AddressFormFilled,
    AddressUI,
    CreditCard,
    FilledField,
    FillingStrategy
)


async def disable() -> None:
    '''
    Disables autofill domain notifications.
    '''
    session = get_session_context('autofill.disable')
    return await session.execute(cdp.autofill.disable())


async def enable() -> None:
    '''
    Enables autofill domain notifications.
    '''
    session = get_session_context('autofill.enable')
    return await session.execute(cdp.autofill.enable())


async def set_addresses(
        addresses: typing.List[Address]
    ) -> None:
    '''
    Set addresses so that developers can verify their forms implementation.

    :param addresses:
    '''
    session = get_session_context('autofill.set_addresses')
    return await session.execute(cdp.autofill.set_addresses(addresses))


async def trigger(
        field_id: cdp.dom.BackendNodeId,
        card: CreditCard,
        frame_id: typing.Optional[cdp.page.FrameId] = None
    ) -> None:
    '''
    Trigger autofill on a form identified by the fieldId.
    If the field and related form cannot be autofilled, returns an error.

    :param field_id: Identifies a field that serves as an anchor for autofill.
    :param card: Credit card information to fill out the form. Credit card data is not saved.
    :param frame_id: *(Optional)* Identifies the frame that field belongs to.
    '''
    session = get_session_context('autofill.trigger')
    return await session.execute(cdp.autofill.trigger(field_id, card, frame_id))
