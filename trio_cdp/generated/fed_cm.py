# DO NOT EDIT THIS FILE!
#
# This code is generated off of PyCDP modules. If you need to make
# changes, edit the generator and regenerate all of the modules.

from __future__ import annotations
import typing

from ..context import get_connection_context, get_session_context

import cdp.fed_cm
from cdp.fed_cm import (
    Account,
    DialogShown,
    DialogType,
    LoginState
)


async def confirm_idp_login(
        dialog_id: str
    ) -> None:
    '''
    Only valid if the dialog type is ConfirmIdpLogin. Acts as if the user had
    clicked the continue button.

    :param dialog_id:
    '''
    session = get_session_context('fed_cm.confirm_idp_login')
    return await session.execute(cdp.fed_cm.confirm_idp_login(dialog_id))


async def disable() -> None:
    session = get_session_context('fed_cm.disable')
    return await session.execute(cdp.fed_cm.disable())


async def dismiss_dialog(
        dialog_id: str,
        trigger_cooldown: typing.Optional[bool] = None
    ) -> None:
    '''
    :param dialog_id:
    :param trigger_cooldown: *(Optional)*
    '''
    session = get_session_context('fed_cm.dismiss_dialog')
    return await session.execute(cdp.fed_cm.dismiss_dialog(dialog_id, trigger_cooldown))


async def enable(
        disable_rejection_delay: typing.Optional[bool] = None
    ) -> None:
    '''
    :param disable_rejection_delay: *(Optional)* Allows callers to disable the promise rejection delay that would normally happen, if this is unimportant to what's being tested. (step 4 of https://fedidcg.github.io/FedCM/#browser-api-rp-sign-in)
    '''
    session = get_session_context('fed_cm.enable')
    return await session.execute(cdp.fed_cm.enable(disable_rejection_delay))


async def reset_cooldown() -> None:
    '''
    Resets the cooldown time, if any, to allow the next FedCM call to show
    a dialog even if one was recently dismissed by the user.
    '''
    session = get_session_context('fed_cm.reset_cooldown')
    return await session.execute(cdp.fed_cm.reset_cooldown())


async def select_account(
        dialog_id: str,
        account_index: int
    ) -> None:
    '''
    :param dialog_id:
    :param account_index:
    '''
    session = get_session_context('fed_cm.select_account')
    return await session.execute(cdp.fed_cm.select_account(dialog_id, account_index))
